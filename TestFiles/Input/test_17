/* Real tests */

procedure main() returns integer{ 
        var out = std_output();

	var real x;

	// big double
	x = (2 ^ 31) - 1;
        x -> out;
	'\n' -> out;

	// big double
	x = - (2^ 31);
	x -> out;
	'\n' -> out;

	// underscores and different representations
	x = .42;
	x -> out;
	'\n' -> out;	

	x = 42.0;
	x -> out;
	'\n' -> out;

	x = 42e-10;
	x -> out;
	'\n' -> out;
	
	x = 42e10;
	x -> out;
	'\n' -> out;

	x = 42.e-10;
	x -> out;
	'\n' -> out;

	x = 42.e+10;
	x -> out;
	'\n' -> out;

	x = ._____42__;
	x -> out;
	'\n' -> out;

	x = 4_2_._0_;
	x -> out;
	'\n' -> out;

	x = 4_2_e_+_10_;
	x -> out;
	'\n' -> out;

	// addition
	x = 1_e+_10_ + 1_e+_10_;
	x -> out;
	'\n' -> out;

	// subtraction
	x = 1.1 - 2.2;
	x -> out;
	'\n' -> out;

	x = 2.1 - 1.2;
	x -> out;
	'\n' -> out;

	// multiplication
	x = 1.1 * 2.2;
	x -> out;
	'\n' -> out;

	// division
	x = 1.1 / 2.2;
	x -> out;
	'\n' -> out;

	x = 2.2 / 1.1;
	x -> out;
	'\n' -> out;

	// modulus
	x = 1.1 % 2.1;
	x -> out;
	'\n' -> out;

	x = 2.1 % 1.1;
	x -> out;
	'\n' -> out;
	
	// exponentiation
	x = 1.1 ^ 2.1;
	x -> out;
	'\n' -> out;

	x = 2.1 ^ 1.1;
	x -> out;
	'\n' -> out;

	// unary negation
	x = - 1.1;
	x -> out;
	'\n' -> out;

	x = - (1.1 + 1.1);
	x -> out;
	'\n' -> out;

	// unary plus
	x = +(1.1 % 2.1);
	x -> out;	
	'\n' -> out;

	x = +(2.1 % 1.1);
	x -> out;
	'\n' -> out;

	// unary ( + (- 1))
	x = ( + (- 1.23));
	x -> out;
	'\n' -> out;

	// less than
	x = 2.2 < 1.2;
	x -> out;
	'\n' -> out;

	x = 1.78 < 2;
	x -> out;
	'\n' -> out;

	// greater than
	x = 2.34 > 1;
	x -> out;
	'\n' -> out;

	x = 1.22 > 2;
	x -> out;
	'\n' -> out;

	// less than or equal to
	x = 2 <= 1.3;
	x -> out;
	'\n' -> out;

	x = 1 <= 2.9;
	x -> out;
	'\n' -> out;

	// greater than or equal to
	x = 2 >= 1.34;
	x -> out;
	'\n' -> out;

	x = 1 >= 2.3;
	x -> out;
	'\n' -> out;

	// equals
	x = 2 == 1.1;
	x -> out;
	'\n' -> out;

	x = 1 == 1.3;
	x -> out;
	'\n' -> out;

	// not equals
	x = 2 != 1.1;
	x -> out;
	'\n' -> out;

	x = 1 != 1.2;
	x -> out;
	'\n' -> out;

	// precedence
	x = +as<integer>(-as<integer>(as<integer>(as<integer>(as<integer>(as<integer>(as<integer>(as<integer>(2 == 1) != 0) < 0) > 0) <= 0) >= 0) + 1 - 2.34) * -1 / 1 % 2 ^ 2);
	x -> out;
	'\n' -> out;

        /* must have a return */ 
        return 0; 
}
