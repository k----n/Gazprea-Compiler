globalVariable(name) ::= "<name> = global i8* null, align 8"
localVariable(name) ::= <<
<name> = alloca i8*, align 8
store i8* null, i8** <name>, align 8
>>

functionCall(name) ::= "call void @<name>()"
function(name, code) ::= <<
define void @GazFunc_<name>() #3 {
  <code :{ line | <line><\n>}>
}


>>
functionReturn() ::= "ret void"

// name is the unique name of the tuple
// fields are the data types in llvm form (e.g. i32, i8, etc.)
tuple_struct(name, fields) ::= <<
%Gaz_Struct.<name> = type {<fields; separator=",\n">}
>>

pushVariable(name) ::= "call void @_Z4pushPPv(i8** <name>)"
pushVariableValue(name) ::= "call void @_Z17pushVariableValuePPv(i8** <name>)"
assignVariable(name) ::= "call void @_Z6assignPPv(i8** <name>)"

varInit_integer() ::= "call void @_Z22varInitPushNullIntegerv()"
varInit_output() ::= "call void @_Z10std_outputv()"
varInit_input() ::= "call void @_Z9std_inputv()"
varInit_boolean() ::= "call void @_Z22varInitPushNullBooleanv()"

swapStack() ::= "call void @_Z15swapStackTopTwov()"

promoteTo(typeLetter) ::= "call void @_Z11promoteTo_<typeLetter>()"

pushNull() ::= "call void @_Z8pushNullv()"
pushIdentity() ::= "call void @_Z12pushIdentityv()"
pushInteger(value) ::= "call void @_Z11pushIntegeri(i32 <value>)"
pushBoolean(value) ::= "call void @_Z11pushBooleanb(i1 zeroext <value>)"



addition(typeLetter) ::= "call void @_Z5add_<typeLetter>()"
subtraction(typeLetter) ::= "call void @_Z5sub_<typeLetter>()"
multiplication(typeLetter) ::= "call void @_Z5mul_<typeLetter>()"
division(typeLetter) ::= "call void @_Z5div_<typeLetter>()"
modulus(typeLetter) ::= "call void @_Z5mod_<typeLetter>()"
exponentiation(typeLetter) ::= "call void @_Z5exp_<typeLetter>()"
negation(typeLetter) ::= "call void @_Z5neg_<typeLetter>()"
lessthan(typeLetter) ::= "call void @_Z5lt__<typeLetter>()"
greaterthan(typeLetter) ::= "call void @_Z5gt__<typeLetter>()"
lessthanequal(typeLetter) ::= "call void @_Z5leq_<typeLetter>()"
greaterthanequal(typeLetter) ::= "call void @_Z5geq_<typeLetter>()"
equal(typeLetter) ::= "call void @_Z5eq__<typeLetter>()"
notequal(typeLetter) ::= "call void @_Z5neq_<typeLetter>()"
logicalor(typeLetter) ::= "call void @_Z5lor_<typeLetter>()"
logicalxor(typeLetter) ::= "call void @_Z5lxr_<typeLetter>()"
logicaland(typeLetter) ::= "call void @_Z5lnd_<typeLetter>()"

rightArrowOperator() ::= "call void @_Z18rightArrowOperatorv()"
leftArrowOperator() ::= "call void @_Z17leftArrowOperatorv()"
